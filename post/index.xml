<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Dan Octavian</title>
    <link>https://danoctavian.com/post/</link>
    <description>Recent content in Posts on Dan Octavian</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 04 Jan 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://danoctavian.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Saving time with property-based testing</title>
      <link>https://danoctavian.com/2019/03/25/saving-time-property-based-testing/</link>
      <pubDate>Sat, 04 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://danoctavian.com/2019/03/25/saving-time-property-based-testing/</guid>
      <description>Saving time with property-based testing Introduction Writing tests takes a lot of time, but as our code grows, quality can become a concern and more and more bugs are likely to creep in, hence we can&amp;rsquo;t put it off for much longer. Also, when implementing algorithms under tight time constraints such as an algorithm coding challenges, exhaustively thinking through all the edge cases can get tricky.
In this article we will showcase how efficient is property-based testing in terms of saving your precious developer time when writing tests or come in handy when you need find bugs in record time, all by expressing our test cases in terms of properties to be verified, instead of typing out lots of concrete test cases.</description>
    </item>
    
    <item>
      <title>Improved Node.js logging for async code</title>
      <link>https://danoctavian.com/2019/04/13/thinking-coroutines-nodejs-part2/</link>
      <pubDate>Sat, 13 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://danoctavian.com/2019/04/13/thinking-coroutines-nodejs-part2/</guid>
      <description>Improved Node.js logging for async code We&amp;rsquo;ve taken a look in part 1 at how we can reason about Node.js code in terms of coroutines to get better code structure and make use of concurrency constructs similar to those of Golang. In this part we will look at what we need to add to support logging ids for async calls in Node.js similar to getting the ID of the current thread in Java.</description>
    </item>
    
    <item>
      <title>Applying Golang concepts in Node.js</title>
      <link>https://danoctavian.com/2019/03/25/thinking-coroutines-nodejs/</link>
      <pubDate>Mon, 25 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://danoctavian.com/2019/03/25/thinking-coroutines-nodejs/</guid>
      <description>Applying Golang concepts in Node.js  Yeah, I think it’s… for a particular class of application, which is like, if you’re building a server, I can’t imagine using anything other than Go. That said, I think Node’s non-blocking paradigm worked out well for JavaScript, where you don’t have threads. And I think that a lot of the problems with kind of the call-back soup problem, where you have to jump into many anonymous functions to complete what you’re doing has been alleviated these days, with the async keyword, the async feature that’s in Javascript now.</description>
    </item>
    
  </channel>
</rss>