<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>blogpost on Dan Octavian</title>
    <link>https://danoctavian.com/tags/blogpost/</link>
    <description>Recent content in blogpost on Dan Octavian</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 13 Apr 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://danoctavian.com/tags/blogpost/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Improved Node.js logging for async code</title>
      <link>https://danoctavian.com/2019/04/13/thinking-coroutines-nodejs-part2/</link>
      <pubDate>Sat, 13 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://danoctavian.com/2019/04/13/thinking-coroutines-nodejs-part2/</guid>
      <description>Improved Node.js logging for async code We&amp;rsquo;ve taken a look in part 1 at how we can reason about Node.js code in terms of coroutines to get better code structure and make use of concurrency constructs similar to those of Golang. In this part we will look at what we need to add to support logging ids for async calls in Node.js similar to getting the ID of the current thread in Java.</description>
    </item>
    
    <item>
      <title>Applying Golang concepts in Node.js</title>
      <link>https://danoctavian.com/2019/03/25/thinking-coroutines-nodejs/</link>
      <pubDate>Mon, 25 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://danoctavian.com/2019/03/25/thinking-coroutines-nodejs/</guid>
      <description>Applying Golang concepts in Node.js  Yeah, I think it’s… for a particular class of application, which is like, if you’re building a server, I can’t imagine using anything other than Go. That said, I think Node’s non-blocking paradigm worked out well for JavaScript, where you don’t have threads. And I think that a lot of the problems with kind of the call-back soup problem, where you have to jump into many anonymous functions to complete what you’re doing has been alleviated these days, with the async keyword, the async feature that’s in Javascript now.</description>
    </item>
    
  </channel>
</rss>